{"version":3,"file":"upgrade_module.js","sourceRoot":"","sources":["../../../../../modules/@angular/upgrade/src/aot/upgrade_module.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAC,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAC,MAAM,eAAe;OAEjD,KAAK,OAAO,MAAM,eAAe;OACjC,EAAC,aAAa,EAAC,MAAM,SAAS;OAE9B,EAAC,iBAAiB,EAAE,kBAAkB,EAAC,MAAM,sBAAsB;OACnE,EAAC,SAAS,EAAE,YAAY,EAAE,mBAAmB,EAAC,MAAM,aAAa;AAGxE;;;;GAIG;AAEH;IAGE,uBAAmB,QAAkB,EAAS,MAAc;QAAzC,aAAQ,GAAR,QAAQ,CAAU;QAAS,WAAM,GAAN,MAAM,CAAQ;IAAG,CAAC;IAEhE;;;;;OAKG;IACH,iCAAS,GAAT,UAAU,OAAgB,EAAE,OAAsB,EAAE,MAAwC;QAA5F,iBA6BC;QA7B2B,uBAAsB,GAAtB,YAAsB;QAChD,oCAAoC;QACpC,IAAM,aAAa,GACf,OAAO;aACF,MAAM,CAAC,mBAAmB,EAAE,OAAO,CAAC;aAEpC,KAAK,CAAC,YAAY,EAAE,IAAI,CAAC,QAAQ,CAAC;aAElC,GAAG,CAAC;YACH,SAAS;YACT,UAAC,SAAmC;gBAClC,KAAI,CAAC,SAAS,GAAG,SAAS,CAAC;gBAE3B,wCAAwC;gBACxC,kBAAkB,CAAC,SAAS,CAAC,CAAC;gBAC9B,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;gBAE7B,4DAA4D;gBAC5D,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,KAAI,CAAC,QAAQ,CAAC,CAAC;gBAE1E,4EAA4E;gBAC5E,IAAI,UAAU,GAAG,SAAS,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;gBAC7C,KAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,SAAS,CAClC,cAAM,OAAA,KAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,cAAM,OAAA,UAAU,CAAC,UAAU,EAAE,EAAvB,CAAuB,CAAC,EAA5D,CAA4D,CAAC,CAAC;YAC1E,CAAC;SACF,CAAC,CAAC;QAEX,sDAAsD;QACtD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,cAAQ,OAAO,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACvF,CAAC;IACI,wBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,EAAC,SAAS,EAAE,iBAAiB,EAAC,EAAG,EAAE;KAC3D,CAAC;IACF,kBAAkB;IACX,4BAAc,GAA6D;QAClF,EAAC,IAAI,EAAE,QAAQ,GAAG;QAClB,EAAC,IAAI,EAAE,MAAM,GAAG;KACf,CAAC;IACF,oBAAC;AAAD,CAAC,AAjDD,IAiDC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector, NgModule, NgZone} from '@angular/core';\n\nimport * as angular from '../angular_js';\nimport {controllerKey} from '../util';\n\nimport {angular1Providers, setTempInjectorRef} from './angular1_providers';\nimport {$INJECTOR, INJECTOR_KEY, UPGRADE_MODULE_NAME} from './constants';\n\n\n/**\n * The Ng1Module contains providers for the Ng1Adapter and all the core Angular 1 services;\n * and also holds the `bootstrapNg1()` method fo bootstrapping an upgraded Angular 1 app.\n * @experimental\n */\n\nexport class UpgradeModule {\n  public $injector: angular.IInjectorService;\n\n  constructor(public injector: Injector, public ngZone: NgZone) {}\n\n  /**\n   * Bootstrap an Angular 1 application from this NgModule\n   * @param element the element on which to bootstrap the Angular 1 application\n   * @param [modules] the Angular 1 modules to bootstrap for this application\n   * @param [config] optional extra Angular 1 bootstrap configuration\n   */\n  bootstrap(element: Element, modules: string[] = [], config?: angular.IAngularBootstrapConfig) {\n    // Create an ng1 module to bootstrap\n    const upgradeModule =\n        angular\n            .module(UPGRADE_MODULE_NAME, modules)\n\n            .value(INJECTOR_KEY, this.injector)\n\n            .run([\n              $INJECTOR,\n              ($injector: angular.IInjectorService) => {\n                this.$injector = $injector;\n\n                // Initialize the ng1 $injector provider\n                setTempInjectorRef($injector);\n                this.injector.get($INJECTOR);\n\n                // Put the injector on the DOM, so that it can be \"required\"\n                angular.element(element).data(controllerKey(INJECTOR_KEY), this.injector);\n\n                // Wire up the ng1 rootScope to run a digest cycle whenever the zone settles\n                var $rootScope = $injector.get('$rootScope');\n                this.ngZone.onMicrotaskEmpty.subscribe(\n                    () => this.ngZone.runOutsideAngular(() => $rootScope.$evalAsync()));\n              }\n            ]);\n\n    // Bootstrap the angular 1 application inside our zone\n    this.ngZone.run(() => { angular.bootstrap(element, [upgradeModule.name], config); });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{providers: angular1Providers}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: Injector, },\n{type: NgZone, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}