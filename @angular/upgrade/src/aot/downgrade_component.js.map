{"version":3,"file":"downgrade_component.js","sourceRoot":"","sources":["../../../../../modules/@angular/upgrade/src/aot/downgrade_component.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAmB,wBAAwB,EAAW,MAAM,eAAe;OAK3E,EAAC,SAAS,EAAE,MAAM,EAAE,YAAY,EAAC,MAAM,aAAa;OACpD,EAAC,yBAAyB,EAAC,MAAM,+BAA+B;AAEvE,IAAI,cAAc,GAAG,CAAC,CAAC;AAEvB;;GAEG;AACH,mCAAmC,IAAmB;IACpD,IAAM,QAAQ,GAAG,iBAAe,cAAc,EAAE,MAAG,CAAC;IACpD,IAAI,OAAO,GAAG,CAAC,CAAC;IAEhB,IAAM,gBAAgB,GACW,UACI,SAAmC,EACnC,MAA6B;QAEhE,MAAM,CAAC;YACL,QAAQ,EAAE,GAAG;YACb,OAAO,EAAE,IAAI,GAAG,YAAY;YAC5B,IAAI,EAAE,UAAC,KAAqB,EAAE,OAAiC,EAAE,KAA0B,EACpF,cAAwB,EAAE,UAAuC;gBAEtE,EAAE,CAAC,CAAC,cAAc,KAAK,IAAI,CAAC,CAAC,CAAC;oBAC5B,cAAc,GAAG,SAAS,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;gBAC/C,CAAC;gBAED,IAAM,wBAAwB,GAC1B,cAAc,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;gBACjD,IAAM,gBAAgB,GAClB,wBAAwB,CAAC,uBAAuB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAErE,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;oBACtB,MAAM,IAAI,KAAK,CAAC,kCAAkC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;gBACvE,CAAC;gBAED,IAAM,MAAM,GAAG,IAAI,yBAAyB,CACxC,QAAQ,GAAG,CAAC,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,cAAc,EAAE,MAAM,EAC3E,gBAAgB,CAAC,CAAC;gBACtB,MAAM,CAAC,WAAW,EAAE,CAAC;gBACrB,MAAM,CAAC,eAAe,EAAE,CAAC;gBACzB,MAAM,CAAC,cAAc,EAAE,CAAC;gBACxB,MAAM,CAAC,YAAY,EAAE,CAAC;gBACtB,MAAM,CAAC,eAAe,EAAE,CAAC;YAC3B,CAAC;SACF,CAAC;IACJ,CAAC,CAAC;IAEF,gBAAgB,CAAC,OAAO,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;IAC/C,MAAM,CAAC,gBAAgB,CAAC;AAC1B,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentFactory, ComponentFactoryResolver, Injector} from '@angular/core';\n\nimport * as angular from '../angular_js';\n\nimport {ComponentInfo} from './component_info';\nimport {$INJECTOR, $PARSE, INJECTOR_KEY} from './constants';\nimport {DowngradeComponentAdapter} from './downgrade_component_adapter';\n\nlet downgradeCount = 0;\n\n/**\n * @experimental\n */\nexport function downgradeComponent(info: ComponentInfo): angular.IInjectable {\n  const idPrefix = `NG2_UPGRADE_${downgradeCount++}_`;\n  let idCount = 0;\n\n  const directiveFactory:\n      angular.IAnnotatedFunction = function(\n                                       $injector: angular.IInjectorService,\n                                       $parse: angular.IParseService): angular.IDirective {\n\n    return {\n      restrict: 'E',\n      require: '?^' + INJECTOR_KEY,\n      link: (scope: angular.IScope, element: angular.IAugmentedJQuery, attrs: angular.IAttributes,\n             parentInjector: Injector, transclude: angular.ITranscludeFunction) => {\n\n        if (parentInjector === null) {\n          parentInjector = $injector.get(INJECTOR_KEY);\n        }\n\n        const componentFactoryResolver: ComponentFactoryResolver =\n            parentInjector.get(ComponentFactoryResolver);\n        const componentFactory: ComponentFactory<any> =\n            componentFactoryResolver.resolveComponentFactory(info.component);\n\n        if (!componentFactory) {\n          throw new Error('Expecting ComponentFactory for: ' + info.component);\n        }\n\n        const facade = new DowngradeComponentAdapter(\n            idPrefix + (idCount++), info, element, attrs, scope, parentInjector, $parse,\n            componentFactory);\n        facade.setupInputs();\n        facade.createComponent();\n        facade.projectContent();\n        facade.setupOutputs();\n        facade.registerCleanup();\n      }\n    };\n  };\n\n  directiveFactory.$inject = [$INJECTOR, $PARSE];\n  return directiveFactory;\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}