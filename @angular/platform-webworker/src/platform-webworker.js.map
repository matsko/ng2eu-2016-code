{"version":3,"file":"platform-webworker.js","sourceRoot":"","sources":["../../../../modules/@angular/platform-webworker/src/platform-webworker.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAII,EAAC,aAAa,EAAE,gBAAgB,EAAC,MAAM,iBAAiB;AAE/D,SAAQ,mBAAmB,EAAE,0BAA0B,EAAE,KAAK,EAAE,WAAW,QAAO,4CAA4C,CAAC;AAC/H,SAAQ,UAAU,QAAyC,kCAAkC,CAAC;AAC9F,SAAQ,SAAS,QAAO,iCAAiC,CAAC;AAC1D,SAAQ,eAAe,EAAE,oBAAoB,EAAE,2BAA2B,QAAO,6CAA6C,CAAC;AAC/H,SAAQ,4BAA4B,QAAO,qCAAqC,CAAC;AACjF,SAAQ,6BAA6B,QAAO,yCAAyC,CAAC;AACtF,SAAQ,eAAe,EAAE,iBAAiB,QAAO,cAAc,CAAC;AAChE,SAAQ,gBAAgB,QAAO,iBAAiB,CAAC;AAGjD;;;;GAIG;AACH,kCACI,eAAuB,EAAE,eAAgC;IAAhC,+BAAgC,GAAhC,oBAAgC;IAC3D,kDAAkD;IAClD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAE,CAAC;YACA,OAAO,EAAE,aAAa;YACtB,QAAQ,EAAE,eAAe;SAC1B,CAAgB;SACZ,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;AACzE,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformRef, Provider} from '@angular/core';\n\nimport {WORKER_SCRIPT, platformWorkerUi} from './worker_render';\n\nexport {ClientMessageBroker, ClientMessageBrokerFactory, FnArg, UiArguments} from './web_workers/shared/client_message_broker';\nexport {MessageBus, MessageBusSink, MessageBusSource} from './web_workers/shared/message_bus';\nexport {PRIMITIVE} from './web_workers/shared/serializer';\nexport {ReceivedMessage, ServiceMessageBroker, ServiceMessageBrokerFactory} from './web_workers/shared/service_message_broker';\nexport {WORKER_UI_LOCATION_PROVIDERS} from './web_workers/ui/location_providers';\nexport {WORKER_APP_LOCATION_PROVIDERS} from './web_workers/worker/location_providers';\nexport {WorkerAppModule, platformWorkerApp} from './worker_app';\nexport {platformWorkerUi} from './worker_render';\n\n\n/**\n * Bootstraps the worker ui.\n *\n * @experimental\n */\nexport function bootstrapWorkerUi(\n    workerScriptUri: string, customProviders: Provider[] = []): Promise<PlatformRef> {\n  // For now, just creates the worker ui platform...\n  return Promise.resolve(platformWorkerUi(([{\n                                            provide: WORKER_SCRIPT,\n                                            useValue: workerScriptUri,\n                                          }] as Provider[])\n                                              .concat(customProviders)));\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}