{"version":3,"file":"client_message_broker.js","sourceRoot":"","sources":["../../../../../../modules/@angular/platform-webworker/src/web_workers/shared/client_message_broker.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Type} from '@angular/core';\n\nimport {EventEmitter} from '../../facade/async';\nimport {isPresent, print, stringify} from '../../facade/lang';\n\nimport {MessageBus} from './message_bus';\nimport {Serializer} from './serializer';\n\n/**\n * @experimental WebWorker support in Angular is experimental.\n */\nexport abstract class ClientMessageBrokerFactory {\n  /**\n   * Initializes the given channel and attaches a new {@link ClientMessageBroker} to it.\n   */\n  abstract createMessageBroker(channel: string, runInZone?: boolean): ClientMessageBroker;\n}\n\n\nexport class ClientMessageBrokerFactory_ extends ClientMessageBrokerFactory {\n  /** @internal */\n  _serializer: Serializer;\n  constructor(private _messageBus: MessageBus, _serializer: Serializer) {\n    super();\n    this._serializer = _serializer;\n  }\n\n  /**\n   * Initializes the given channel and attaches a new {@link ClientMessageBroker} to it.\n   */\n  createMessageBroker(channel: string, runInZone: boolean = true): ClientMessageBroker {\n    this._messageBus.initChannel(channel, runInZone);\n    return new ClientMessageBroker_(this._messageBus, this._serializer, channel);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: MessageBus, },\n{type: Serializer, },\n];\n}\n\n/**\n * @experimental WebWorker support in Angular is experimental.\n */\nexport abstract class ClientMessageBroker {\n  abstract runOnService(args: UiArguments, returnType: Type<any>): Promise<any>;\n}\n\ninterface PromiseCompleter {\n  resolve: (result: any) => void;\n  reject: (err: any) => void;\n}\n\nexport class ClientMessageBroker_ extends ClientMessageBroker {\n  private _pending: Map<string, PromiseCompleter> = new Map<string, PromiseCompleter>();\n  private _sink: EventEmitter<any>;\n  /** @internal */\n  public _serializer: Serializer;\n\n  constructor(\n      messageBus: MessageBus, _serializer: Serializer, public channel: any /** TODO #9100 */) {\n    super();\n    this._sink = messageBus.to(channel);\n    this._serializer = _serializer;\n    var source = messageBus.from(channel);\n\n    source.subscribe({next: (message: {[key: string]: any}) => this._handleMessage(message)});\n  }\n\n  private _generateMessageId(name: string): string {\n    var time: string = stringify(new Date().getTime());\n    var iteration: number = 0;\n    var id: string = name + time + stringify(iteration);\n    while (isPresent((this as any /** TODO #9100 */)._pending[id])) {\n      id = `${name}${time}${iteration}`;\n      iteration++;\n    }\n    return id;\n  }\n\n  runOnService(args: UiArguments, returnType: Type<any>): Promise<any> {\n    var fnArgs: any[] /** TODO #9100 */ = [];\n    if (isPresent(args.args)) {\n      args.args.forEach(argument => {\n        if (argument.type != null) {\n          fnArgs.push(this._serializer.serialize(argument.value, argument.type));\n        } else {\n          fnArgs.push(argument.value);\n        }\n      });\n    }\n\n    var promise: Promise<any>;\n    var id: string = null;\n    if (returnType != null) {\n      let completer: PromiseCompleter;\n      promise = new Promise((resolve, reject) => { completer = {resolve, reject}; });\n      id = this._generateMessageId(args.method);\n      this._pending.set(id, completer);\n      promise.catch((err) => {\n        print(err);\n        completer.reject(err);\n      });\n\n      promise = promise.then((value: any) => {\n        if (this._serializer == null) {\n          return value;\n        } else {\n          return this._serializer.deserialize(value, returnType);\n        }\n      });\n    } else {\n      promise = null;\n    }\n\n    // TODO(jteplitz602): Create a class for these messages so we don't keep using StringMap #3685\n    var message = {'method': args.method, 'args': fnArgs};\n    if (id != null) {\n      (message as any /** TODO #9100 */)['id'] = id;\n    }\n    this._sink.emit(message);\n\n    return promise;\n  }\n\n  private _handleMessage(message: {[key: string]: any}): void {\n    var data = new MessageData(message);\n    // TODO(jteplitz602): replace these strings with messaging constants #3685\n    if (data.type === 'result' || data.type === 'error') {\n      var id = data.id;\n      if (this._pending.has(id)) {\n        if (data.type === 'result') {\n          this._pending.get(id).resolve(data.value);\n        } else {\n          this._pending.get(id).reject(data.value);\n        }\n        this._pending.delete(id);\n      }\n    }\n  }\n}\n\nclass MessageData {\n  type: string;\n  value: any;\n  id: string;\n\n  constructor(data: {[key: string]: any}) {\n    this.type = data['type'];\n    this.id = this._getValueIfPresent(data, 'id');\n    this.value = this._getValueIfPresent(data, 'value');\n  }\n\n  /**\n   * Returns the value if present, otherwise returns null\n   * @internal\n   */\n  _getValueIfPresent(data: {[key: string]: any}, key: string) {\n    return data.hasOwnProperty(key) ? data[key] : null;\n  }\n}\n\n/**\n * @experimental WebWorker support in Angular is experimental.\n */\nexport class FnArg {\n  constructor(public value: any /** TODO #9100 */, public type: Type<any>) {}\n}\n\n/**\n * @experimental WebWorker support in Angular is experimental.\n */\nexport class UiArguments {\n  constructor(public method: string, public args?: FnArg[]) {}\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}